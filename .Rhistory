my_div
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files)
old.dir<-getwd()
dir.creat("testdir")
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
play()
getwd()
nxt()
file.info("mytest.R")
file.rename("mytest.R,mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path()
file.path("mytest3.R")
file.path("mytest3.R",folder1,folder2)
file.path("mytest3.R","folder1","folder2")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2",recursive=TRUE,file.path("testdir3"))
dir.create(recursive=TRUE,file.path("testdir2",testdir3"))
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(0,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
resp(c(0,1,2),times=10)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name <- c(my_char,"JaneH")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),collapse="")
paste(1:3,c("X","Y","Z"),sep = "")
paste(LETTERS,1:4,sep="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo","bar","norf")
idential(vect,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints >5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("Let's try this","please")
submit()
mad_libs(noun="house",adjective="sad",place="New York")
submit()
"I" %p% "love" %p%"R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100,prob=0.7)
rbinom(1,obs=100,prob=0.7)
flips2 <- rbinom(1,n=100,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
rpois(5,mean=10)
rpois(5,lambda=10)
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d. %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units="days")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mtcars,mpg~cyl)
boxplot(mtcars,formula=mpg~cyl)
boxplot(data=mtcars,formula=mpg~cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
t<-apply(mtcars$hp,mtcars$cyl,mean)
t<-sapply(split(mtcars$hp,mtcars$cyl),mean)
t
t[3]-t[1]
head(iris)
sapply(split(iris$Sepal.Length,iris$Species),mean)
apply(iris[,1:4],2,mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
sapply(mtcars,cyl,mean)
lapply(mtcars,mean)
with(mtcars,tapply(mpg,cyl,mean))
t<-with(mtcars,tapply(hp,cyl,mean))
t
t[3]-t[1]
m <- NULL
m
str(m)
?<<-
help ("<<-")
makeVector
makeVector()
makeVector <- function(x=numeric()){ # function of x with default empty numeric vector
m <- NULL   # initialize m to a null vector
set <- function(y){
x <<- y  # look for
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
makeVector
makeVector()
t<-makeVector()
str(t)
t<-makeVector(c(1,2,3,4))
t
str(t)
cachemean <- function(x,...){
m <- x$getmean() # puts getmean into m
if(!is.null(m)){  # if there is a mean there
message("getting cached data")
return(m)   # return the mean and exit
}   # if not, get the data
data <- x$get()
m <- mean(data,...)  # compute the mean
x$setmean(m)      # set the mean to the computed mean
m           # return the computed mean
}
x <- rnorm(100)
mean(x)
cachemean(x)
makeVector(x)
cachemean(x)
z <- makeVector(x)
str(z)
cachemean(z)
cachemean(z)
ls()
dir()
path()
## Store the input matrix in cache
## Will create a special vector, which is really a list containing a function to
## 1. Set the value of the matrix
## 2. get the value of the matrix
## 3. set the value of the inverse
## 4. get the value of the inverse
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL   # initialize m to a null vector
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve # puts function input into m
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse=getinverse)
}
## Check to see if the inverse already exists.
## If so, return the inverse from cache.
#  Otherwise, compute the inverse and store it in cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse() # puts getinverse into m
if(!is.null(m)){  # if there is an inverse there
message("getting cached data")
return(m)   # return the inverse and exit
}   # if not, get the data
data <- x$get()
m <- solve(data,...)  # compute the inverse
x$setinverse(m)      # set the inverse to the computed inverse
m           # return the computed inverse
}
M <- c(1,0,0,1,2,0,1,1,1)
rep(M,3,3)
rep(M,c(3,3))
matrix(M, nrow=3,ncol=3)
M <- c(1,1,1,0,2,1,0,0,1)
matrix(M, nrow=3,ncol=3)
M2 <- matrix(M, nrow=3,ncol=3)
solve(M2)
makeCacheMatrix(M2)
cacheSolve(M2)
t2 <- makeCacheMatrix(M2)
cacheSolve(t2)
cacheSolve(t2)
cacheSolve(makeCacheMatrix(M2))
cacheSolve(makeCacheMatrix(M2))
cacheSolve(t2)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
x
?z.test
?t.test
qnorm(.005)
q <- qnorm(.005)
s <- sqrt(.538*(1-.538)/1095)
.538 + q*s
.538 - q*s
.538*1095
prop.test(589,1095,alternative="greater",conf.level=0.99)
prop.test(n=1095,589,alternative="greater",conf.level=0.99)
prop.test(n=1095,589,conf.level=0.99)
prop.test(1095,589,conf.level=0.99)
prop.test(589,1095,conf.level=0.99)
q
q*11000
28.334^2
x<-c(0,0,2,2,2,4,6)
t.test(x)
y<-c(0,0,2,2,2,4,60)
t.test(y)
setwd("~/Academia/DataScience")
install.packages(c("lattice", "ggplot2"))
?ttest2
t.test2 <- function(m1,m2,s1,s2,n1,n2,m0=0,equal.variance=FALSE)
{
if( equal.variance==FALSE )
{
se <- sqrt( (s1^2/n1) + (s2^2/n2) )
# welch-satterthwaite df
df <- ( (s1^2/n1 + s2^2/n2)^2 )/( (s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1) )
df
} else
{
# pooled standard deviation, scaled by the sample sizes
se <- sqrt( (1/n1 + 1/n2) * ((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2) )
df <- n1+n2-2
}
t <- (m1-m2-m0)/se
dat <- c(m1-m2, se, t, 2*pt(-abs(t),df),df)
names(dat) <- c("Difference of means", "Std Error", "t", "p-value","df")
return(dat)
}
t.test2(3,5,.6,.68,10,10)
qt(.975,17.72519)
qt(.975,17.72519)*.2867752
setwd("~/Academia/DataScience/Coursera")
# Project for getting and cleaning data
# J. Hartsfield 10/23/2015
library(dplyr)
# read in the data
# create data directory if it does not exist
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile="./data/temp.zip") # download file
unzip("./data/temp.zip", exdir = "./data") # unzip file
# read tables into R
subject_test <- read.table("./data/UCI HAR Dataset/test/subject_test.txt")
X_test <- read.table("./data/UCI HAR Dataset/test/X_test.txt")
Y_test <- read.table("./data/UCI HAR Dataset/test/Y_test.txt")
subject_train <- read.table("./data/UCI HAR Dataset/train/subject_train.txt")
X_train <- read.table("./data/UCI HAR Dataset/train/X_train.txt")
Y_train <- read.table("./data/UCI HAR Dataset/train/Y_train.txt")
features <- read.table("./data/UCI HAR Dataset/features.txt")
activities <- read.table("./data/UCI HAR Dataset/activity_labels.txt")
# combine into one large table
Col1 <- rbind(subject_test,subject_train)
Col2 <- rbind(Y_test,Y_train)
dm <- cbind(Col1, Col2)
Col3 <- rbind(X_test, X_train)
dm <- cbind(dm, Col3)
# make a vector out of feature names and set as column names
M <- as.matrix(features)
M2 <- M[,2]
CN <- c("Subject","ActivityLabel",M2)
colnames(dm) <- CN
# keep only columns for subject number, activity label, and those for mean and std.
keepind <- grepl("mean()", CN)
keepind <- keepind & ! grepl("meanFreq()",CN) # exclude meanFreq
keepind2 <- grepl("std()", CN)
keepind <- keepind | keepind2
keepind[1:2] <- TRUE # keep columns for subject and activity label
dm <- dm[,keepind]
# order the data by Subject and ActivityLabel
# dmord <- arrange(dm,Subject,ActivityLabel)
# replace ActivityLabel numbers with corresponding activity
for(i in 1:length(activities$V1)){
dm$ActivityLabel <- gsub(activities$V1[i],activities$V2[i],dm$ActivityLabel)
}
# create an array with the average of each activity for each subject
df <- as.data.frame(dm)
df <- df %>% group_by(Subject,ActivityLabel) %>% summarise_each(funs(mean))
dm2 <- as.matrix(df)
write.table(dm2, file="run_analysis_output.txt", row.names = FALSE)
View(dm2)
View(dm2)
setwd("~/Academia/DataScience/Coursera/GetDataProject")
